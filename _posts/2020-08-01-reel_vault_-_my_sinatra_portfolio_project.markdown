---
layout: post
title:      "Reel Vault - My Sinatra Portfolio Project"
date:       2020-08-01 16:19:34 -0400
permalink:  reel_vault_-_my_sinatra_portfolio_project
---

Movies have always been a big part of my life. Before starting my journey to become a software developer, I worked on film sets and held positions with Chicago-area film festivals. As part of this work, I had the opportunity to learn the art of film projection. While doing so, I discovered the importance of the craft and why film preservation is so important. I also noticed that the industry lacks a formal inventory and tracking system for the film prints held by collectors, theaters, and film preservation organizations worldwide. For my second Flatiron portfolio project, I decided to create a film print management app that allows users to sign in, create records of their film prints, view their film collection, and update and delete films when necessary. Both registered and unregistered users can view the collections of others.

After my initial project planning phase, I sat down to build the setup of my application. The wonderful corneal gem came in handy as it created almost all of the necessary directories to get me to the good stuff, the actual coding, as soon as possible. Before I even started on my MVC, I decided to create my database. Although my schema changed slightly during development, creating my database was fairly easy because I had mapped out my tables, columns, and has many/belongs to relationships ahead of time during project planning. From there I created my User and Film models, and I was off to work on my restful routes. All seven restful routes became my friends on this project. CRUD (Create, Read, Update, Delete) was initiated on Films, and all I needed to do was add a User controller to allow users to login/logout and organize their own film prints (without allowing them to edit/delete the film prints of others). With time, the help of Google, and patience, I was able to achieve this goal. However, I did not want to stop there. I wanted to make a unique application to serve as a strong foundation for a future live website.

The feature I’m most proud of is the search bar, which makes the user experience more pleasant and further connects the film community by allowing users to search the collections of others. First, I wanted to create a search bar that would allow users to view films by title or theater/organization without having to login or signup. It is my desire to share information with everyone regardless of whether they own a film print collection themselves. I wanted the search bar to be on every page so that all users could easily access it whether signed in or not. This of course created two challenges for me: deciding how unregistered users could view film records without having any edit or delete capabilities, and implementing the search bar itself since I had never written methods pertaining to a search bar before. As you can see below, the search bar methods aren’t as scary as one would think:

![](https://raw.githubusercontent.com/AndyAtari/reel-vault/master/public/images/2020-08-01%20(8).png)<br><br>

![](https://raw.githubusercontent.com/AndyAtari/reel-vault/master/public/images/2020-08-01%20(6).png)<br><br>

![](https://raw.githubusercontent.com/AndyAtari/reel-vault/master/public/images/2020-08-01%20(4).png)<br><br>

I already knew how to create a form, so I just needed to figure out the get request and how to display the results in my view. With the search results, I checked to see if the film’s title or theater matched with my database and then iterated over all the films that matched and returned those film titles with links to that film’s show page based on the film’s unique ID. If there were no matching films, then an error message would be displayed to the user. The controller would make a get request if there were any params or if the user presses enter while in the search bar. All I needed to do to make sure the results were rendered was to create a search method in my Film model. The search method is an sql query where it passes through the search parameters to find any matching words; in my case, it would be a film title or theater/organization that matches the database. 

The other search bar challenge was achieved through validations and authentications. Validating the user presence and authenticating the user really helped me easily display the edit and delete option for only the films that the logged-in user owned. With ActiveRecord associations, validations, and authentications, all I needed to do was verify that the film ID belonged to the currently logged in user ID. It may seem like many intricate steps, but just remember that ActiveRecord and Sinatra are your friends and will help you succeed. 

My ambitions for the portfolio project have only increased over time. To me this is not just a “do good and submit” kind of project. I want to watch my application grow and continue to improve. I am passionate about preserving the legacy of film, and I want to promote not only the preservation but also the screening of film prints. I hope that the Reel Vault will evolve into a platform where anyone can find film prints of their favorite film and contact the owner or theater to find out about future screenings of that print. I want to continue to hear projectors hum along as they illuminate the screens. I want my project to become a website that encourages people to start film collections and allows theaters and preservation organizations to trade and screen each other's prints for new audiences. It’s a lofty goal, but the foundation is here, and it all started with a fun portfolio project for my coding class.  


If you are interested in my project or want to help contribute, please check out my [repo](https://github.com/AndyAtari/reel-vault) on github!
